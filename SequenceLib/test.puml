@startuml
/'
!include C:\Users\valik\IdeaProjects\PlantUML_SequenceLib\SequenceLib\src\SequenceLibIncludeFile_v4.puml
diagramInit(draft, "test")
'/

autonumber

!$layer = 0
!$id = 0
!$proxyArrowType = {"->":"Проксирование запроса","-->":"Проксирование ответа"}
!$arrowTypeForLegend = {"->":"rq","-->":"rs"}

/'Объект: стрелка'/
!$actionObject = {}

/'Список объектов - стрелок'/
!$procMap = []

/'Интерфейс для отрисовки сплошной стрелки'/
!unquoted procedure rq($from, $to, $ll, $actionText, $comment)
    %invoke_procedure("inputValidator", "->", $from, $to, $ll, $actionText, $comment)
!endprocedure

/'Интерфейс для отрисовки пунктирной стрелки'/
!unquoted procedure rs($from, $to, $ll, $actionText, $comment)
    %invoke_procedure("inputValidator", "-->", $from, $to, $ll, $actionText, $comment)
!endprocedure

/'Валидатор данных для отрисовки стрелок'/
!unquoted procedure inputValidator($arrowType, $from, $to, $ll, $actionText, $comment)
    /'Автоответ'/
    !if $from == "" && $to == ""
        /'Т.к. объект еще не создан, $id хранит идентификатор предыдущей стрелки либо 0,
        нумерация списков в plantUml начинается с 0, поэтому из $id вычитаем 1,
        чтобы обратиться к последнему объекту в карте процесса'/
        !$i = $id - 1
        !$from = $procMap[$i].to
        !$to = $procMap[$i].from
    /'Копирование стрелки'/
    !elseif $from == "*"
        !$i = %intval($to) - 1
        !$to = $procMap[$i].to
        !$from = $procMap[$i].from
    /'Обработка проксирования'/
    !endif

    !if $to != ""
        !$executorList = %splitstr($to, ",")
        !$ifFirst = 1
        !foreach $item in %splitstr($to, ",")
            !if $ifFirst
                !$to = $item
                !$ifFirst = 0
            !else
                !$from = $to /'Еще не обновили значение $to, записываем его в $from'/
                !$to = $item /'Обновили значение $to'/
                !$actionText = $proxyArrowType[$arrowType]
            !endif
            %invoke_procedure("actionController", $arrowType, $from, $to, $ll, $actionText, $comment)
        !endfor
    !else
        %invoke_procedure("actionController", $arrowType, $from, $to, $ll, $actionText, $comment)
    !endif
!endprocedure

/'Контроллер для отрисовки и сохранения в памяти стрелок,
создает объект текущей стрелки, записывает его в карту процесса, рисует стрелку'/
!unquoted procedure actionController($arrowType, $from, $to, $ll, $actionText, $comment)
    !$id = $id + 1
    %invoke_procedure("setContext", $arrowType, $from, $to, $ll, $actionText, $comment)
    !$procMap = %json_add($procMap, $actionObject)
    %invoke_procedure("actionBuilder")
!endprocedure

!unquoted procedure setContext($arrowType, $from, $to, $ll, $actionText, $comment)
    !$actionObject = %json_set($actionObject, actionId, $id)
    !$actionObject = %json_set($actionObject, arrowType, $arrowType)
    !$actionObject = %json_set($actionObject, from, $from)
    !$actionObject = %json_set($actionObject, to, $to)
    !$actionObject = %json_set($actionObject, ll, $ll)
    !$actionObject = %json_set($actionObject, actionText, $actionText)
    !$actionObject = %json_set($actionObject, comment, $comment)
    !$actionObject = %json_set($actionObject, layer, $layer)
    !dump_memory
!endprocedure

!unquoted procedure showProcMap()
    note across
    !foreach $item in $procMap
| $item.actionId | $item.from | $item.to | $arrowTypeForLegend[$item.arrowType] | $item.actionText | $item.comment |
    !endfor
    end note
!endprocedure

!unquoted procedure actionBuilder($objectId="")
!if $objectId != ""
    !$i = %intval($objectId) - 1
    $procMap[$i].from $procMap[$i].arrowType $procMap[$i].to $procMap[$i].ll : $procMap[$i].actionText
!endif
$actionObject.from $actionObject.arrowType $actionObject.to $actionObject.ll : $actionObject.actionText
!endprocedure

rq(,Лена,++,"","")
rs(,,,"","")
rq(Лена,,--++,"Победа","1")
rq(*,1,,"","")
rs(Валера,"1,2,3",--++,"Текст","")
rq(Лена,,,"","")





showProcMap()

@enduml