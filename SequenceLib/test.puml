@startuml
/'
!include C:\Users\valik\IdeaProjects\PlantUML_SequenceLib\SequenceLib\src\SequenceLibIncludeFile_v4.puml
diagramInit(draft, "test")
'/

autonumber

!$layer = 0
!$id = 0

/'Объект: стрелка'/
!$actionObject = {}

/'Список объектов - стрелок'/
!$procMap = []

/'Интерфейс для отрисовки сплошной стрелки'/
!unquoted procedure rq($from, $to, $ll, $actionText, $comment)
    %invoke_procedure("inputValidator", "->", $from, $to, $ll, $actionText, $comment)
!endprocedure

/'Интерфейс для отрисовки пунктирной стрелки'/
!unquoted procedure rs($from, $to, $ll, $actionText, $comment)
    %invoke_procedure("inputValidator", "-->", $from, $to, $ll, $actionText, $comment)
!endprocedure

/'Валидатор данных для отрисовки стрелок'/
!unquoted procedure inputValidator($arrowType, $from, $to, $ll, $actionText, $comment)
    /'Автоответ'/
    !if $from == "" && $to == ""
        /'Т.к. объект еще не создан, $id хранит идентификатор предыдущей стрелки либо 0,
        нумерация списков в plantUml начинается с 0, поэтому из $id вычитаем 1,
        чтобы обратиться к последнему объекту в карте процесса'/
        !$i = $id - 1
        !$from = $procMap[$i].to
        !$to = $procMap[$i].from
    /'Копирование стрелки'/
    !elseif $from == "*"
        !$i = %intval($to) - 1
        !$from = $procMap[$i].from
        !$to = $procMap[$i].to
    !endif

    /'Вызов контроллера и проверка проксирования'/
    !if $to != ""
        !$executorList = %splitstr($to, ",")
        !$executorListSize = %size($executorList)
        !$ifFirst = 1
        !foreach $item in $executorList
            !if %not($ifFirst)
                !$actionText = "Прокси"
            !endif
            %invoke_procedure("actionController", $arrowType, $from, $item, $ll, $actionText, $comment)
            !$ifFirst = 0
            !$from = $item
        !endfor
    !else
        %invoke_procedure("actionController", $arrowType, $from, $to, $ll, $actionText, $comment)
    !endif
!endprocedure

/'Контроллер для отрисовки и сохранения в памяти стрелок,
создает объект текущей стрелки, записывает его в карту процесса, рисует стрелку'/
!unquoted procedure actionController($arrowType, $from, $to, $ll, $actionText, $comment)
    !$id = $id + 1
    %invoke_procedure("setContext", $arrowType, $from, $to, $ll, $actionText, $comment)
    %invoke_procedure("setProcMap")
    %invoke_procedure("actionBuilder")
!endprocedure

!unquoted procedure setContext($arrowType, $from, $to, $ll, $actionText, $comment)
    !$actionObject = %json_set($actionObject, actionId, $id)
    !$actionObject = %json_set($actionObject, arrowType, $arrowType)
    !$actionObject = %json_set($actionObject, from, $from)
    !$actionObject = %json_set($actionObject, to, $to)
    !$actionObject = %json_set($actionObject, ll, $ll)
    !$actionObject = %json_set($actionObject, actionText, $actionText)
    !$actionObject = %json_set($actionObject, comment, $comment)
    !$actionObject = %json_set($actionObject, layer, $layer)
    '!dump_memory
!endprocedure

!unquoted procedure setProcMap()
    !$procMap = %json_add($procMap, $actionObject)
!endprocedure

!unquoted procedure showProcMap()
    !$i = 0
    note across
    !foreach $item in $procMap
        | $procMap[$i].actionId | $procMap[$i].from | $procMap[$i].to | $procMap[$i].arrowType | $procMap[$i].actionText | $procMap[$i].comment |
        !$i = $i + 1
    !endfor
    end note
!endprocedure

!unquoted procedure actionBuilder()
$actionObject.from $actionObject.arrowType $actionObject.to $actionObject.ll : $actionObject.actionText
!endprocedure

rq(Валера, "lib, rtsa,asdf",++,"ывап","1")
rs(,"sdfasdf,asdfasdf",,"","")
rs(,,,"","")


showProcMap()

@enduml